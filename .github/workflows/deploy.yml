name: Deploy

on:
  # Trigger the workflow on push or pull request,
  # but only for the develop and master branch
  push:
    branches:
      - develop
      - master

jobs:

  aot:
    if: contains(github.ref, 'develop') || contains(github.ref, 'master')  || contains(github.ref, 'production')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2

    - name: Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - run: npm install

    # replacable environment, required for ngc
    - run: npm run create:env:dev
      env:
        ASSET_CDN_HOST: 'stub'
        COCKPIT_API_URL: 'stub'
        COCKPIT_API_KEY: 'stub'
        GRAPHQL_HOST_URL: 'stub'
        GTM_ID: 'stub'
        GCP_KEY: 'stub'
        GCP_STATIC_MAPS_SECRET: 'stub'
        SLACK_ERROR_HOOK_URL: 'stub'

    # create environment based on the secrets
    - run: npm run create:env:prod
      if: contains(github.ref, 'develop')
      env:
        ASSET_CDN_HOST: ${{ secrets.ASSET_CDN_HOST }}
        COCKPIT_API_URL: ${{ secrets.COCKPIT_API_URL }}
        COCKPIT_API_KEY: ${{ secrets.COCKPIT_API_KEY }}
        GRAPHQL_HOST_URL: ${{ secrets.GRAPHQL_HOST_URL }}
        GTM_ID: ${{ secrets.BETA_GTM_ID }}
        GCP_KEY: ${{ secrets.GCP_KEY }}
        GCP_STATIC_MAPS_SECRET: ${{ secrets.GCP_STATIC_MAPS_SECRET }}
        SLACK_ERROR_HOOK_URL: ${{ secrets.SLACK_ERROR_HOOK_URL }}

    # create environment based on the secrets
    - run: npm run create:env:prod
      if: contains(github.ref, 'master')
      env:
        ASSET_CDN_HOST: ${{ secrets.ASSET_CDN_HOST }}
        COCKPIT_API_URL: ${{ secrets.COCKPIT_API_URL }}
        COCKPIT_API_KEY: ${{ secrets.COCKPIT_API_KEY }}
        GRAPHQL_HOST_URL: ${{ secrets.GRAPHQL_HOST_URL }}
        GTM_ID: ${{ secrets.GTM_ID }}
        GCP_KEY: ${{ secrets.GCP_KEY }}
        GCP_STATIC_MAPS_SECRET: ${{ secrets.GCP_STATIC_MAPS_SECRET }}
        SLACK_ERROR_HOOK_URL: ${{ secrets.SLACK_ERROR_HOOK_URL }}

    - run: npm run production

    # generate artifact for publishing process which saves the
    # AOT compiled output from the /dist folder
    - name: Generate production artifacts
      uses: actions/upload-artifact@v1
      with:
        name: aot
        path: dist


  publish:
    needs: [aot]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      # cache all modules for the deployment process only
      - name: cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # use the AOT output from the previous build process
      # and restore it as fake compilation output
      - name: download artifact
        uses: actions/download-artifact@v1
        with:
          name: aot
          path: dist

      - name: Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm install

      # deploy to staging if we're on develop branch or
      # if we get a new production release to sync the systems
      - name: deploy development
        if: contains(github.ref, 'develop') || contains(github.ref, 'master')
        run: npm run deploy:development
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PASS: ${{ secrets.DEPLOY_PASS }}
          DEPLOY_ROOT: ${{ secrets.DEPLOY_ROOT }}

      # deploy to production host
      - name: deploy production
        if: contains(github.ref, 'master')
        run: npm run deploy:production
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PASS: ${{ secrets.DEPLOY_PASS }}
          DEPLOY_ROOT: ${{ secrets.DEPLOY_ROOT }}

      - name: issue message
        if: failure()
        uses: 8398a7/action-slack@v2
        with:
          author_name: Deployment Robot
          status: ${{ job.status }}
          text: 'Deployment failed :tired_face:, please view GitHub Action output.'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  message:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - name: slack notification
        if: contains(github.ref, 'development')
        uses: 8398a7/action-slack@v2
        with:
          author_name: Deployment Robot
          status: success
          text: 'Deployment to https://beta.rheinklang-festival.ch done :rocket:!'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: slack notification
        if: contains(github.ref, 'master')
        uses: 8398a7/action-slack@v2
        with:
          author_name: Deployment Robot
          status: success
          text: 'Deployment to https://rheinklang-festival.ch done :rocket:!'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


